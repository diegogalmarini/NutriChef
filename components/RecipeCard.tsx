import React from 'react';
import type { Recipe, Difficulty } from '../types';
import jsPDF from 'jspdf';
import DifficultyMeter from './DifficultyMeter';
import { pdfIcons } from './pdfIcons';

const ImagePlaceholder = () => (
    <div className="w-full h-64 bg-slate-200 flex items-center justify-center animate-pulse">
        <svg className="w-12 h-12 text-slate-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
    </div>
);

interface RecipeCardProps {
    recipe: Recipe;
    language: 'en' | 'es';
    onToggleFavorite: (recipe: Recipe) => void;
    isFavorite: boolean;
    onShare: (recipe: Recipe) => void;
}

const RecipeCard: React.FC<RecipeCardProps> = ({ recipe, language, onToggleFavorite, isFavorite, onShare }) => {
    
    const handleDownloadPdf = () => {
        const doc = new jsPDF({
            orientation: 'p',
            unit: 'mm',
            format: 'a4'
        });

        // --- Document Setup ---
        const pageW = doc.internal.pageSize.getWidth();
        const pageH = doc.internal.pageSize.getHeight();
        const margin = 15;
        const contentW = pageW - margin * 2;
        const pageBottom = pageH - margin;
        let yPos = 0;
        let page = 1;

        // --- Colors & Fonts ---
        const primaryColor = '#22c55e'; // green-500
        const textColorDark = '#1e293b'; // slate-800
        const textColorMedium = '#475569'; // slate-600
        const textColorLight = '#64748b'; // slate-500
        const bgSlate = '#f1f5f9'; // slate-100
        const borderSlate = '#e2e8f0'; // slate-200
        doc.setFont('helvetica');

        // --- Helper Functions ---
        const addPageHeader = () => {
            doc.setFillColor(primaryColor);
            doc.rect(0, 0, pageW, 20, 'F');
            doc.addImage(pdfIcons.logo, 'PNG', margin, 5, 10, 10);
            doc.setFontSize(18);
            doc.setFont('helvetica', 'bold');
            doc.setTextColor('#FFFFFF');
            doc.text('NutriChef', margin + 12, 12.5);
            yPos = 20 + margin;
        };
        
        const addPageFooter = (currentPage: number) => {
            doc.setPage(currentPage);
            doc.setFontSize(9);
            doc.setFont('helvetica', 'italic');
            doc.setTextColor(textColorLight);
            const totalPages = doc.getNumberOfPages();
            const footerText = `Generated by NutriChef | Page ${currentPage} of ${totalPages}`;
            doc.text(footerText, pageW / 2, pageH - 7, { align: 'center' });
        };
        
        const checkPageBreak = (requiredHeight: number) => {
            if (yPos + requiredHeight > pageBottom) {
                addPageFooter(page);
                doc.addPage();
                page++;
                addPageHeader();
                return true;
            }
            return false;
        };
        
        // --- 1. Header ---
        addPageHeader();

        // --- 2. Recipe Title & Description ---
        doc.setFontSize(24);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(textColorDark);
        const titleLines = doc.splitTextToSize(recipe.recipeName, contentW);
        checkPageBreak(titleLines.length * 9 + 6);
        doc.text(titleLines, pageW / 2, yPos, { align: 'center' });
        yPos += titleLines.length * 9 + 6;

        doc.setFontSize(11);
        doc.setFont('helvetica', 'italic');
        doc.setTextColor(textColorMedium);
        const descriptionLines = doc.splitTextToSize(recipe.description, contentW - 10);
        checkPageBreak(descriptionLines.length * 4.5 + 10);
        doc.text(descriptionLines, pageW / 2, yPos, { align: 'center' });
        yPos += descriptionLines.length * 4.5 + 10;

        // --- 3. Image ---
        if (recipe.imageUrl && recipe.imageUrl.startsWith('data:image')) {
            try {
                const imgData = recipe.imageUrl;
                // Assuming JPEG or PNG. Let jsPDF handle it.
                const format = recipe.imageUrl.includes('jpeg') ? 'JPEG' : 'PNG';
                const ratio = 16 / 9;
                const finalW = contentW;
                const finalH = finalW / ratio;
                checkPageBreak(finalH + 10);
                doc.addImage(imgData, format, margin, yPos, finalW, finalH, undefined, 'FAST');
                yPos += finalH + 10;
            } catch (e) { console.error("Could not add image to PDF", e); }
        }

        // --- 4. Meta Info Panel ---
        const infoBoxHeight = 18;
        checkPageBreak(infoBoxHeight + 10);
        
        doc.setFillColor(bgSlate);
        doc.setDrawColor(borderSlate);
        doc.roundedRect(margin, yPos, contentW, infoBoxHeight, 3, 3, 'FD');

        const metaItems = [
            { label: language === 'es' ? 'Raciones' : 'Servings', value: String(recipe.servings), icon: pdfIcons.servings },
            { label: 'Prep', value: recipe.prepTime, icon: pdfIcons.prep },
            { label: 'Cook', value: recipe.cookTime, icon: pdfIcons.cook },
            { label: language === 'es' ? 'Calorías' : 'Calories', value: `~${recipe.calories} kcal`, icon: pdfIcons.calories }
        ];

        const metaColWidth = contentW / 4;
        metaItems.forEach((item, index) => {
            const x = margin + (metaColWidth * index);
            doc.addImage(item.icon, 'PNG', x + 5, yPos + 5, 8, 8);
            
            doc.setFontSize(8);
            doc.setFont('helvetica', 'bold');
            doc.setTextColor(textColorLight);
            doc.text(item.label.toUpperCase(), x + 18, yPos + 7);

            doc.setFontSize(10);
            doc.setFont('helvetica', 'normal');
            doc.setTextColor(textColorDark);
            doc.text(item.value, x + 18, yPos + 13);
        });
        yPos += infoBoxHeight + 10;
        
        // --- 5. Nutrition Panel ---
        if(recipe.nutrition) {
            const nutritionBoxHeight = 18;
            checkPageBreak(nutritionBoxHeight + 10);
            doc.setFillColor(bgSlate);
            doc.setDrawColor(borderSlate);
            doc.roundedRect(margin, yPos, contentW, nutritionBoxHeight, 3, 3, 'FD');
            
            const nutritionItems = [
                { label: language === 'es' ? 'Proteína' : 'Protein', value: recipe.nutrition.protein },
                { label: language === 'es' ? 'Carbs' : 'Carbs', value: recipe.nutrition.carbs },
                { label: language === 'es' ? 'Grasas' : 'Fats', value: recipe.nutrition.fats },
            ];
            const nutritionColWidth = contentW / 3;
            nutritionItems.forEach((item, index) => {
                const x = margin + (nutritionColWidth * index) + (nutritionColWidth / 2);
                doc.setFontSize(8);
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(textColorLight);
                doc.text(item.label.toUpperCase(), x, yPos + 7, { align: 'center' });

                doc.setFontSize(12);
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(primaryColor);
                doc.text(item.value, x, yPos + 13, { align: 'center' });
            });
            yPos += nutritionBoxHeight + 10;
        }
        
        // --- 6. Difficulty Meter ---
        const difficultyMap: Record<Difficulty, { level: number; label: { en: string; es: string; } }> = {
            'Very Easy': { level: 1, label: { en: 'Very Easy', es: 'Muy Fácil' } },
            'Easy': { level: 2, label: { en: 'Easy', es: 'Fácil' } },
            'Medium': { level: 3, label: { en: 'Medium', es: 'Media' } },
            'Hard': { level: 4, label: { en: 'Hard', es: 'Difícil' } },
            'Expert': { level: 5, label: { en: 'Expert', es: 'Experta' } }
        };
        const { level, label } = difficultyMap[recipe.difficulty] || difficultyMap['Medium'];
        checkPageBreak(12);
        const meterY = yPos;
        doc.setFontSize(10);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(textColorDark);
        doc.text(`${language === 'es' ? 'Dificultad' : 'Difficulty'}:`, margin, meterY + 3.5);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(textColorMedium);
        doc.text(label[language], margin + 22, meterY + 3.5);
        
        const barTotalWidth = 60;
        const barStartX = pageW - margin - barTotalWidth;
        const barWidth = barTotalWidth / 5;
        doc.setDrawColor(borderSlate);
        for (let i = 0; i < 5; i++) {
            const barX = barStartX + (i * barWidth);
            doc.setFillColor(i < level ? primaryColor : '#FFFFFF');
            doc.rect(barX, meterY, barWidth - 1, 4, 'FD');
        }
        yPos += 12;

        // --- 7. Ingredients & Instructions ---
        const gutter = 10;
        const colWidth = (contentW - gutter) / 2;
        const col1X = margin;
        const col2X = margin + colWidth + gutter;
        
        // Headers
        checkPageBreak(15);
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(textColorDark);
        doc.text(language === 'es' ? 'Ingredientes' : 'Ingredients', col1X, yPos);
        doc.text(language === 'es' ? 'Instrucciones' : 'Instructions', col2X, yPos);
        yPos += 8;

        let yPosLeft = yPos;
        let yPosRight = yPos;

        doc.setFontSize(9);
        doc.setFont('helvetica', 'normal');
        doc.setLineHeightFactor(1.4);
        
        const ingredientsList = recipe.ingredients.map(ing => `• ${ing.quantity} ${ing.name}${ing.isStaple ? (language === 'es' ? ' (Sugerido)' : ' (Suggested)') : ''}`);
        const instructionsList = recipe.instructions.map((step, index) => `${index + 1}. ${step}`);
        
        let ingIndex = 0;
        let instIndex = 0;

        const renderColumnsOnPage = () => {
            while(ingIndex < ingredientsList.length || instIndex < instructionsList.length) {
                const canProcessLeft = ingIndex < ingredientsList.length;
                const canProcessRight = instIndex < instructionsList.length;

                // Determine which column to process next based on available space and balance
                const processLeft = canProcessLeft && (yPosLeft <= yPosRight || !canProcessRight);

                if (processLeft) {
                    const ingLines = doc.splitTextToSize(ingredientsList[ingIndex], colWidth);
                    const ingHeight = (ingLines.length * 3.5 * 1.4) + 2;
                    if (yPosLeft + ingHeight > pageBottom) {
                        // Not enough space, try to fill the other column before breaking
                        if (canProcessRight && yPosRight < pageBottom) {
                            yPosLeft = pageBottom + 1; // force right column processing
                            continue;
                        }
                        break; // Break page
                    }
                    doc.text(ingLines, col1X, yPosLeft);
                    yPosLeft += ingHeight;
                    ingIndex++;
                } else if (canProcessRight) {
                    const stepLines = doc.splitTextToSize(instructionsList[instIndex], colWidth);
                    const stepHeight = (stepLines.length * 3.5 * 1.4) + 3;
                     if (yPosRight + stepHeight > pageBottom) {
                        if (canProcessLeft && yPosLeft < pageBottom) {
                           yPosRight = pageBottom + 1; // force left column processing
                           continue;
                        }
                        break; // Break page
                    }
                    doc.text(stepLines, col2X, yPosRight);
                    yPosRight += stepHeight;
                    instIndex++;
                } else {
                    break;
                }
            }
        };
        
        while (ingIndex < ingredientsList.length || instIndex < instructionsList.length) {
            renderColumnsOnPage();

            if (ingIndex < ingredientsList.length || instIndex < instructionsList.length) {
                addPageFooter(page);
                doc.addPage();
                page++;
                addPageHeader();
                
                doc.setFontSize(14);
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(textColorDark);
                doc.text(language === 'es' ? 'Ingredientes' : 'Ingredients', col1X, yPos);
                doc.text(language === 'es' ? 'Instrucciones' : 'Instructions', col2X, yPos);

                yPosLeft = yPosRight = yPos + 8;
                doc.setFontSize(9);
                doc.setFont('helvetica', 'normal');
                doc.setLineHeightFactor(1.4);
            }
        }
        
        yPos = Math.max(yPosLeft, yPosRight);
        doc.setLineHeightFactor(1.0);

        // --- 8. Health Tip ---
        if (recipe.healthTip) {
            const tipText = `"${recipe.healthTip}"`;
            const tipLines = doc.splitTextToSize(tipText, contentW - 10);
            const tipBoxHeight = tipLines.length * 4 * 1.4 + 16;
            
            if (checkPageBreak(tipBoxHeight + 5)) {
                // If we broke page, reset yPos to top
                yPos = 20 + margin;
            } else {
                yPos += 5;
            }
            
            doc.setFillColor('#f0fdf4'); // green-50
            doc.roundedRect(margin, yPos, contentW, tipBoxHeight, 3, 3, 'F');
            
            let tipY = yPos + 7;
            doc.setFontSize(10);
            doc.setFont('helvetica', 'bold');
            doc.setTextColor(primaryColor);
            doc.text(language === 'es' ? 'Consejo Saludable' : 'Healthy Tip', margin + 5, tipY);
            tipY += 6;

            doc.setFontSize(9);
            doc.setFont('helvetica', 'italic');
            doc.setTextColor(textColorMedium);
            doc.setLineHeightFactor(1.4);
            doc.text(tipLines, margin + 5, tipY);
            doc.setLineHeightFactor(1.0);
        }
        
        // --- 9. Final Footer ---
        addPageFooter(page);
        
        // --- Save ---
        doc.save(`${recipe.recipeName.replace(/\s+/g, '_').toLowerCase()}.pdf`);
    };

    return (
        <div className="relative bg-white rounded-xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-2xl hover:-translate-y-1 border-t-4 border-green-500">
            <button
                onClick={() => onToggleFavorite(recipe)}
                className="absolute top-4 right-4 z-10 p-2 bg-white/80 backdrop-blur-sm rounded-full text-red-500 hover:bg-white transition-colors duration-200"
                aria-label={isFavorite ? (language === 'es' ? 'Quitar de favoritos' : 'Remove from favorites') : (language === 'es' ? 'Añadir a favoritos' : 'Add to favorites')}
            >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 20 20" fill={isFavorite ? "currentColor" : "none"} stroke="currentColor" strokeWidth="1.5">
                    <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
                </svg>
            </button>
            
            {recipe.imageUrl ? (
                <img src={recipe.imageUrl} alt={recipe.recipeName} className="w-full h-64 object-cover" />
            ) : (
                <ImagePlaceholder />
            )}
            <div className="p-6 md:p-8">
                <h3 className="text-2xl sm:text-3xl font-bold text-slate-800 mb-2">{recipe.recipeName}</h3>
                <p className="text-slate-600 mb-6">{recipe.description}</p>

                <div className="flex flex-wrap gap-x-6 gap-y-3 text-sm text-slate-700 mb-6 border-b border-t border-slate-200 py-4">
                    <div className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor"><path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z" /></svg>
                        <strong>{language === 'es' ? 'Raciones:' : 'Servings:'}</strong> {recipe.servings}
                    </div>
                    <div className="flex items-center gap-2">
                         <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.414-1.414L11 10.586V6z" clipRule="evenodd" /></svg>
                        <strong>Prep:</strong> {recipe.prepTime}
                    </div>
                     <div className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                           <path fillRule="evenodd" d="M12.97,2.58C12.44,2.24,11.56,2.24,11.03,2.58L10,3.31V3.31L7.5,5.81C7.5,5.81,5,7.31,5,10.31 C5,13.81,8.13,16.31,12,16.31S19,13.81,19,10.31C19,7.31,16.5,5.81,16.5,5.81L14,3.31V3.31L12.97,2.58z M12,13.31 C10.62,13.31,9.5,12.19,9.5,10.81C9.5,9.5,12,6.81,12,6.81S14.5,9.5,14.5,10.81C14.5,12.19,13.38,13.31,12,13.31z" clipRule="evenodd" />
                        </svg>
                        <strong>Cook:</strong> {recipe.cookTime}
                    </div>
                     <div className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
                        </svg>
                        <strong>Calories:</strong> ~{recipe.calories} kcal
                    </div>
                </div>

                {recipe.nutrition && (
                    <div className="grid grid-cols-3 gap-1 sm:gap-4 text-center mb-6 p-4 bg-slate-50 rounded-lg border border-slate-200">
                        <div>
                            <p className="text-xs text-slate-500 font-semibold uppercase tracking-wider">{language === 'es' ? 'Proteína' : 'Protein'}</p>
                            <p className="text-xl font-bold text-green-600">{recipe.nutrition.protein}</p>
                        </div>
                        <div>
                            <p className="text-xs text-slate-500 font-semibold uppercase tracking-wider">{language === 'es' ? 'Carbs' : 'Carbs'}</p>
                            <p className="text-xl font-bold text-green-600">{recipe.nutrition.carbs}</p>
                        </div>
                        <div>
                            <p className="text-xs text-slate-500 font-semibold uppercase tracking-wider">{language === 'es' ? 'Grasas' : 'Fats'}</p>
                            <p className="text-xl font-bold text-green-600">{recipe.nutrition.fats}</p>
                        </div>
                    </div>
                )}


                <div className="mb-8">
                    <DifficultyMeter difficulty={recipe.difficulty} language={language}/>
                </div>

                <div className="space-y-8">
                    <div>
                        <h4 className="text-xl font-semibold text-slate-700 mb-3 border-b-2 border-slate-200 pb-2">{language === 'es' ? 'Ingredientes' : 'Ingredients'}</h4>
                        <ul className="space-y-2 text-slate-600 list-disc list-inside">
                            {recipe.ingredients.map((ing, index) => (
                                <li key={index} className="pl-2">
                                    <span className="font-medium text-slate-800">{ing.quantity}</span> {ing.name}
                                    {ing.isStaple && <span className="ml-2 text-xs font-semibold bg-sky-100 text-sky-700 px-2 py-0.5 rounded-full">{language === 'es' ? 'Sugerido' : 'Suggested'}</span>}
                                </li>
                            ))}
                        </ul>
                    </div>
                    <div>
                        <h4 className="text-xl font-semibold text-slate-700 mb-3 border-b-2 border-slate-200 pb-2">{language === 'es' ? 'Instrucciones' : 'Instructions'}</h4>
                        <ol className="space-y-4 text-slate-600 list-decimal list-inside leading-relaxed">
                            {recipe.instructions.map((step, index) => (
                                <li key={index} className="pl-2">{step}</li>
                            ))}
                        </ol>
                    </div>

                    {recipe.healthTip && (
                        <div className="bg-green-50 p-4 rounded-lg border-l-4 border-green-400">
                            <h4 className="text-lg font-semibold text-green-800 mb-2">{language === 'es' ? 'Consejo Saludable' : 'Healthy Tip'}</h4>
                            <p className="text-green-700 italic">{recipe.healthTip}</p>
                        </div>
                    )}

                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 pt-4 border-t border-slate-200">
                         <button
                            onClick={() => onShare(recipe)}
                            className="w-full flex items-center justify-center gap-2 bg-slate-100 hover:bg-slate-200 text-slate-700 font-bold py-3 px-4 rounded-lg transition-colors duration-300"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
                            </svg>
                            {language === 'en' ? 'Share Recipe' : 'Compartir Receta'}
                        </button>
                        <button
                            onClick={handleDownloadPdf}
                            className="w-full flex items-center justify-center gap-2 bg-slate-600 hover:bg-slate-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300"
                        >
                             <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                            {language === 'en' ? 'Download PDF' : 'Descargar PDF'}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default RecipeCard;